syntax = "proto3";
package pt.tecnico.sec.bftb.grpc;

//--------------------------------------------Open Account Operation----------------------------------------------------

message OpenAccountRequest {
  bytes publicKey = 1;
  Balance initialBalance = 2;
  bytes balanceSignature = 3;
  ListSizes listSizes = 4;
  bytes sizesSignature = 5;
  bytes cypheredNonce = 6; // Challenge created by the CLIENT
}

message SignedOpenAccountRequest {
  OpenAccountRequest content = 1;
  bytes signature = 2; // Signature created by the CLIENT
}

// No OpenAccountResponse needed

message SignedOpenAccountResponse {
  bytes signature = 1; // Signature created by the SERVER
}

//-----------------------------------------Read Balance For Write Operation---------------------------------------------

message ReadForWriteRequest {
  bytes senderKey = 1;
  bytes receiverKey = 2;
  bytes cypheredNonce = 3; // Challenge created by the CLIENT
}

message SignedReadForWriteRequest {
  ReadForWriteRequest content = 1;
  bytes signature = 2; // Signature created by the CLIENT
}

message ReadForWriteResponse {
  Balance balance = 1;
  bytes balanceSignature = 2;
  ListSizes senderListSizes = 3;
  bytes senderListSizesSignature = 4;
  ListSizes receiverListSizes = 5;
  bytes receiverListSizesSignature = 6;
}

message SignedReadForWriteResponse {
  ReadForWriteResponse content = 1;
  bytes signature = 2; // Signature created by the SERVER
}

//--------------------------------------------Send Amount Operation-----------------------------------------------------

message SendAmountRequest {
  Transfer transfer = 1;
  bytes senderTransferSignature = 2;
  Balance newBalance = 3;
  bytes balanceSignature = 4;
  ListSizes receiverListSizes = 5;
  bytes receiverSizesSignature = 6;
  bytes cypheredNonce = 7; // Challenge created by the CLIENT
}

message SignedSendAmountRequest {
  SendAmountRequest content = 1;
  bytes signature = 2; // Signature created by the CLIENT
}

// No SendAmountResponse needed

message SignedSendAmountResponse {
  bytes signature = 1; // Signature created by the SERVER
}

//--------------------------------------------Check Account Operation---------------------------------------------------

message CheckAccountRequest {
  bytes publicKey = 1;
  bytes cypheredNonce = 2; // Challenge created by the CLIENT
}

message SignedCheckAccountRequest {
  CheckAccountRequest content = 1;
  bytes signature = 2; // Signature created by the CLIENT
}

message CheckAccountResponse {
  int32 balance = 1;
  repeated Transfer pendingTransfers = 2;
}

message SignedCheckAccountResponse {
  CheckAccountResponse content = 1;
  bytes signature = 2; // Signature created by the SERVER
}

//--------------------------------------------Receive Amount Operation--------------------------------------------------

message ReceiveAmountRequest {
  Transfer transfer = 1;
  bytes receiverTransferSignature = 2;
  Balance newBalance = 3;
  bytes balanceSignature = 4;
  ListSizes senderListSizes = 5;
  bytes senderSizesSignature = 6;
  ListSizes receiverListSizes = 7;
  bytes receiverSizesSignature = 8;
  bytes cypheredNonce = 9; // Challenge created by the CLIENT
}

message SignedReceiveAmountRequest {
  ReceiveAmountRequest content = 1;
  bytes signature = 2; // Signature created by the CLIENT
}

// No ReceiveAmountResponse needed

message SignedReceiveAmountResponse {
  bytes signature = 1; // Signature created by the SERVER
}

//--------------------------------------------Audit Operation-----------------------------------------------------------

message AuditRequest {
  bytes publicKey = 1;
  bytes cypheredNonce = 2; // Challenge created by the CLIENT
}

message SignedAuditRequest {
  AuditRequest content = 1;
  bytes signature = 2; // Signature created by the CLIENT
}

message AuditResponse {
  repeated Transfer history = 1;
}

message SignedAuditResponse {
  AuditResponse content = 1;
  bytes signature = 2; // Signature created by the SERVER
}

//--------------------------------------------Request Nonce Operation---------------------------------------------------

message GetNonceRequest {
  bytes publicKey = 1;
}

message GetNonceResponse {
  bytes cypheredNonce = 1; // Challenge created by the SERVER
}

//--------------------------------------------Data Structures-----------------------------------------------------------

message Transfer {
  int64 timestamp = 1;
  bytes senderKey = 2;
  bytes receiverKey = 3;
  int32 amount = 4;
}

message Balance {
  int32 value = 1;
  int32 wts = 2;
}

message ListSizes {
  int32 pendingSize = 1;
  int32 approvedSize = 2;
  int32 wts = 3;
}

//--------------------------------------------Service-------------------------------------------------------------------

service ServerService {
  rpc open_account(SignedOpenAccountRequest) returns (SignedOpenAccountResponse);
  rpc read_for_write(SignedReadForWriteRequest) returns (SignedReadForWriteResponse);
  rpc send_amount(SignedSendAmountRequest) returns (SignedSendAmountResponse);
  rpc check_account(SignedCheckAccountRequest) returns (SignedCheckAccountResponse);
  rpc receive_amount(SignedReceiveAmountRequest) returns (SignedReceiveAmountResponse);
  rpc audit(SignedAuditRequest) returns (SignedAuditResponse);
  rpc get_nonce(GetNonceRequest) returns (GetNonceResponse);
}
